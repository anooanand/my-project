import React, { useState, useEffect, useRef } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import { ArrowLeft, Save, Download, Sparkles, MessageSquare, BookOpen, Target, Clock, Send } from 'lucide-react';

interface WritingInterfaceProps {}

interface LocationState {
  textType: string;
  textTypeTitle: string;
  prompt: string;
}

export default function WritingInterface({}: WritingInterfaceProps) {
  const location = useLocation();
  const navigate = useNavigate();
  const textareaRef = useRef<HTMLTextAreaElement>(null);
  
  const state = location.state as LocationState;
  const textType = state?.textType || 'narrative';
  const textTypeTitle = state?.textTypeTitle || 'Narrative';
  const prompt = state?.prompt || 'Magical Prompt';

  const [content, setContent] = useState('');
  const [wordCount, setWordCount] = useState(0);
  const [isCoachOpen, setIsCoachOpen] = useState(true);
  const [isVocabOpen, setIsVocabOpen] = useState(false);
  const [isSaving, setIsSaving] = useState(false);
  const [chatMessage, setChatMessage] = useState('');
  const [chatHistory, setChatHistory] = useState<Array<{id: string, text: string, isUser: boolean}>>([]);

  // Generate prompt based on type and selection
  const getPromptText = () => {
    const prompts = {
      'narrative-magical': "Write a story that begins with: 'The old music box in the attic started playing by itself, and suddenly...'",
      'narrative-adventure': "Write an adventure story that starts: 'The treasure map was real, and it led to...'",
      'narrative-mystery': "Begin your mystery with: 'The library book was returned 50 years late, and inside was...'",
      'persuasive-school': "Should students be required to wear school uniforms? Write a persuasive essay with your opinion.",
      'informative-science': "Explain how something in nature works in a way that would interest other students your age.",
      'descriptive-place': "Describe your dream destination so vividly that readers feel like they're there with you."
    };
    
    const key = `${textType}-${prompt.toLowerCase().replace(/\s+/g, '')}`;
    return prompts[key as keyof typeof prompts] || `Write a ${textTypeTitle.toLowerCase()} piece about: ${prompt}`;
  };

  // Update word count when content changes
  useEffect(() => {
    const words = content.trim() ? content.trim().split(/\s+/).length : 0;
    setWordCount(words);
  }, [content]);

  // Auto-resize textarea
  useEffect(() => {
    if (textareaRef.current) {
      textareaRef.current.style.height = 'auto';
      textareaRef.current.style.height = textareaRef.current.scrollHeight + 'px';
    }
  }, [content]);

  const handleSave = async () => {
    setIsSaving(true);
    try {
      // Simulate save operation
      await new Promise(resolve => setTimeout(resolve, 1000));
      // In a real app, you'd save to your backend here
      console.log('Saving content:', { textType, prompt, content });
    } catch (error) {
      console.error('Save error:', error);
    } finally {
      setIsSaving(false);
    }
  };

  const handleDownload = () => {
    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${textTypeTitle}_${prompt.replace(/\s+/g, '_')}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const handleChatSend = () => {
    if (!chatMessage.trim()) return;

    const newMessage = {
      id: Date.now().toString(),
      text: chatMessage,
      isUser: true
    };

    setChatHistory(prev => [...prev, newMessage]);
    setChatMessage('');

    // Simulate AI response
    setTimeout(() => {
      const responses = [
        "Great start! Try adding more descriptive details to help readers visualize the scene.",
        "Your character development is strong. Consider adding dialogue to bring them to life.",
        "This is engaging! You might want to vary your sentence structure for better flow.",
        "Excellent use of imagery! Try incorporating more sensory details - what can characters hear, smell, or feel?",
        "Your plot is developing nicely. Consider adding a bit more conflict or tension to keep readers engaged."
      ];
      
      const aiResponse = {
        id: (Date.now() + 1).toString(),
        text: responses[Math.floor(Math.random() * responses.length)],
        isUser: false
      };

      setChatHistory(prev => [...prev, aiResponse]);
    }, 1000);
  };

  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900 flex">
      {/* Main Writing Area */}
      <div className="flex-1 flex flex-col">
        {/* Header */}
        <div className="bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 px-6 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <button
                onClick={() => navigate('/write/select-type')}
                className="flex items-center space-x-2 text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200"
              >
                <ArrowLeft className="h-5 w-5" />
                <span>Back</span>
              </button>
              <div>
                <h1 className="text-xl font-bold text-gray-900 dark:text-white">
                  {textTypeTitle}: {prompt}
                </h1>
                <p className="text-sm text-gray-600 dark:text-gray-400">
                  NSW Selective Writing Practice
                </p>
              </div>
            </div>
            
            <div className="flex items-center space-x-4">
              <div className="text-sm text-gray-600 dark:text-gray-400">
                <Clock className="h-4 w-4 inline mr-1" />
                {wordCount} words
              </div>
              <button
                onClick={handleSave}
                disabled={isSaving}
                className="flex items-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50"
              >
                <Save className="h-4 w-4" />
                <span>{isSaving ? 'Saving...' : 'Save'}</span>
              </button>
              <button
                onClick={handleDownload}
                className="flex items-center space-x-2 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700"
              >
                <Download className="h-4 w-4" />
                <span>Download</span>
              </button>
            </div>
          </div>
        </div>

        {/* Writing Prompt */}
        <div className="bg-gradient-to-r from-purple-100 to-blue-100 dark:from-purple-900/20 dark:to-blue-900/20 px-6 py-4 border-b border-gray-200 dark:border-gray-700">
          <div className="flex items-start space-x-3">
            <Sparkles className="h-6 w-6 text-purple-600 dark:text-purple-400 mt-1" />
            <div>
              <h3 className="font-semibold text-gray-900 dark:text-white mb-1">Your Writing Prompt</h3>
              <p className="text-gray-700 dark:text-gray-300">{getPromptText()}</p>
            </div>
          </div>
        </div>

        {/* Writing Area */}
        <div className="flex-1 p-6">
          <textarea
            ref={textareaRef}
            value={content}
            onChange={(e) => setContent(e.target.value)}
            placeholder="Start writing your story here..."
            className="w-full min-h-[500px] p-4 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none bg-white dark:bg-gray-800 text-gray-900 dark:text-white text-lg leading-relaxed"
            style={{ fontFamily: 'Georgia, serif' }}
          />
        </div>
      </div>

      {/* Sidebar */}
      <div className="w-80 bg-white dark:bg-gray-800 border-l border-gray-200 dark:border-gray-700 flex flex-col">
        {/* Sidebar Tabs */}
        <div className="flex border-b border-gray-200 dark:border-gray-700">
          <button
            onClick={() => {setIsCoachOpen(true); setIsVocabOpen(false);}}
            className={`flex-1 px-4 py-3 text-sm font-medium ${
              isCoachOpen 
                ? 'text-blue-600 dark:text-blue-400 border-b-2 border-blue-600 dark:border-blue-400' 
                : 'text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200'
            }`}
          >
            <MessageSquare className="h-4 w-4 inline mr-2" />
            Coach
          </button>
          <button
            onClick={() => {setIsVocabOpen(true); setIsCoachOpen(false);}}
            className={`flex-1 px-4 py-3 text-sm font-medium ${
              isVocabOpen 
                ? 'text-blue-600 dark:text-blue-400 border-b-2 border-blue-600 dark:border-blue-400' 
                : 'text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200'
            }`}
          >
            <BookOpen className="h-4 w-4 inline mr-2" />
            Vocabulary
          </button>
        </div>

        {/* Coach Panel */}
        {isCoachOpen && (
          <div className="flex-1 flex flex-col">
            <div className="p-4 border-b border-gray-200 dark:border-gray-700">
              <h3 className="font-semibold text-gray-900 dark:text-white mb-2">Writing Coach</h3>
              <p className="text-sm text-gray-600 dark:text-gray-400">
                Get help with your {textTypeTitle.toLowerCase()} writing!
              </p>
            </div>
            
            {/* Chat History */}
            <div className="flex-1 overflow-y-auto p-4 space-y-4">
              {chatHistory.length === 0 ? (
                <div className="text-center py-8">
                  <MessageSquare className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                  <p className="text-gray-600 dark:text-gray-400 text-sm">
                    Ask me anything about your writing! I can help with:
                  </p>
                  <ul className="text-sm text-gray-500 dark:text-gray-500 mt-2 space-y-1">
                    <li>• Plot development</li>
                    <li>• Character creation</li>
                    <li>• Grammar and style</li>
                    <li>• NSW Selective tips</li>
                  </ul>
                </div>
              ) : (
                chatHistory.map((message) => (
                  <div
                    key={message.id}
                    className={`flex ${message.isUser ? 'justify-end' : 'justify-start'}`}
                  >
                    <div
                      className={`max-w-[80%] p-3 rounded-lg ${
                        message.isUser
                          ? 'bg-blue-600 text-white'
                          : 'bg-gray-100 dark:bg-gray-700 text-gray-900 dark:text-white'
                      }`}
                    >
                      <p className="text-sm">{message.text}</p>
                    </div>
                  </div>
                ))
              )}
            </div>

            {/* Chat Input */}
            <div className="p-4 border-t border-gray-200 dark:border-gray-700">
              <div className="flex space-x-2">
                <input
                  type="text"
                  value={chatMessage}
                  onChange={(e) => setChatMessage(e.target.value)}
                  onKeyPress={(e) => e.key === 'Enter' && handleChatSend()}
                  placeholder="Ask your writing coach..."
                  className="flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white text-sm"
                />
                <button
                  onClick={handleChatSend}
                  className="px-3 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
                >
                  <Send className="h-4 w-4" />
                </button>
              </div>
            </div>
          </div>
        )}

        {/* Vocabulary Panel */}
        {isVocabOpen && (
          <div className="flex-1 p-4">
            <h3 className="font-semibold text-gray-900 dark:text-white mb-4">Vocabulary Helper</h3>
            <div className="space-y-4">
              <div className="bg-gray-50 dark:bg-gray-700 p-3 rounded-lg">
                <h4 className="font-medium text-gray-900 dark:text-white mb-2">Strong Verbs</h4>
                <div className="flex flex-wrap gap-2">
                  {['whispered', 'thundered', 'glimmered', 'soared', 'trembled'].map(word => (
                    <button
                      key={word}
                      onClick={() => setContent(prev => prev + word + ' ')}
                      className="px-2 py-1 bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 rounded text-xs hover:bg-blue-200 dark:hover:bg-blue-800"
                    >
                      {word}
                    </button>
                  ))}
                </div>
              </div>
              
              <div className="bg-gray-50 dark:bg-gray-700 p-3 rounded-lg">
                <h4 className="font-medium text-gray-900 dark:text-white mb-2">Descriptive Words</h4>
                <div className="flex flex-wrap gap-2">
                  {['mysterious', 'enchanting', 'magnificent', 'peculiar', 'extraordinary'].map(word => (
                    <button
                      key={word}
                      onClick={() => setContent(prev => prev + word + ' ')}
                      className="px-2 py-1 bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200 rounded text-xs hover:bg-green-200 dark:hover:bg-green-800"
                    >
                      {word}
                    </button>
                  ))}
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
