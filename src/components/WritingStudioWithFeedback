import React, { useState, useCallback } from 'react';
import { EnhancedWritingAreaWithFeedback } from './EnhancedWritingAreaWithFeedback';
import { DetectedParagraph } from '../utils/paragraphDetection';

// Import OpenAI function (adjust path as needed)
const OPENAI_API_KEY = import.meta.env.VITE_OPENAI_API_KEY;
const OPENAI_API_BASE = import.meta.env.VITE_OPENAI_API_BASE || 'https://api.openai.com/v1';

interface WritingStudioWithFeedbackProps {
  initialContent?: string;
  textType?: string;
  className?: string;
}

export function WritingStudioWithFeedback({ 
  initialContent = "", 
  textType = "narrative",
  className = ""
}: WritingStudioWithFeedbackProps) {
  const [content, setContent] = useState(initialContent);
  const [isLoading, setIsLoading] = useState(false);

  // Handle AI feedback generation
  const handleGetFeedback = useCallback(async (prompt: string, currentTextType?: string): Promise<any> => {
    if (!OPENAI_API_KEY) {
      console.warn('OpenAI API key not configured, using fallback response');
      return {
        feedback: "Great work! Keep writing and developing your ideas. You're doing wonderfully!",
        type: "praise"
      };
    }

    setIsLoading(true);
    
    try {
      const response = await fetch(`${OPENAI_API_BASE}/chat/completions`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${OPENAI_API_KEY}`,
        },
        body: JSON.stringify({
          model: 'gpt-3.5-turbo',
          messages: [
            {
              role: 'system',
              content: `You are a friendly, encouraging writing coach for children aged 8-11 preparing for NSW selective writing tests. Always be positive, supportive, and use age-appropriate language. Focus on one specific aspect per feedback and keep responses concise (1-2 sentences).`
            },
            {
              role: 'user',
              content: prompt
            }
          ],
          max_tokens: 150,
          temperature: 0.7,
        }),
      });

      if (!response.ok) {
        throw new Error(`OpenAI API error: ${response.status}`);
      }

      const data = await response.json();
      const aiResponse = data.choices[0]?.message?.content || '';
      
      // Try to parse JSON response, fallback to text
      try {
        return JSON.parse(aiResponse);
      } catch {
        return {
          feedback: aiResponse || "Excellent work! You're making great progress with your writing!",
          type: "praise"
        };
      }
      
    } catch (error) {
      console.error('Error getting AI feedback:', error);
      
      // Provide encouraging fallback
      const fallbackResponses = [
        "Wonderful paragraph! Your writing is improving with each sentence.",
        "Great job! I love how you're developing your ideas.",
        "Excellent work! Keep up the fantastic writing.",
        "Nice paragraph! You're showing real creativity in your writing.",
        "Well done! Your writing skills are really shining through."
      ];
      
      return {
        feedback: fallbackResponses[Math.floor(Math.random() * fallbackResponses.length)],
        type: "praise"
      };
    } finally {
      setIsLoading(false);
    }
  }, []);

  // Handle new paragraph detection (optional callback)
  const handleNewParagraph = useCallback((paragraph: DetectedParagraph) => {
    console.log('New paragraph detected:', paragraph);
    // You can add additional logic here if needed
    // For example, tracking analytics, saving progress, etc.
  }, []);

  // Handle content changes
  const handleContentChange = useCallback((newContent: string) => {
    setContent(newContent);
    // You can add additional logic here like auto-saving
  }, []);

  return (
    <div className={`writing-studio-with-feedback h-full ${className}`}>
      <EnhancedWritingAreaWithFeedback
        content={content}
        onChange={handleContentChange}
        textType={textType}
        onGetFeedback={handleGetFeedback}
        onNewParagraphForFeedback={handleNewParagraph}
        placeholder={`Start writing your ${textType} here! Your Writing Buddy will give you helpful feedback as you complete each paragraph... âœ¨`}
      />
      
      {/* Optional: Add loading indicator or other UI elements */}
      {isLoading && (
        <div className="fixed bottom-4 right-4 bg-blue-100 text-blue-800 px-3 py-2 rounded-lg shadow-lg">
          <div className="flex items-center space-x-2">
            <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600"></div>
            <span className="text-sm">Getting feedback...</span>
          </div>
        </div>
      )}
    </div>
  );
}

